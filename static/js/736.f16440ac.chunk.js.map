{"version":3,"file":"static/js/736.f16440ac.chunk.js","mappings":"2LAYaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,oKClBWC,EAAOT,EAAAA,GAAAA,GAAH,+VAIF,SAAAU,GAAC,OAAIA,EAAEC,MAAMT,MAAM,EAAlB,IAA0B,SAAAQ,GAAC,OAAIA,EAAEC,MAAMT,MAAM,EAAlB,IAW9BU,EAAOZ,EAAAA,GAAAA,GAAH,ukBAEI,SAAAU,GAAC,OAAIA,EAAEC,MAAMT,MAAM,EAAlB,IAOG,SAAAQ,GAAC,OAAIA,EAAEC,MAAMT,MAAM,EAAlB,IAKD,SAAAQ,GAAC,OAAIA,EAAEC,MAAMT,MAAM,EAAlB,IAMH,SAAAQ,GAAC,OAAIA,EAAEC,MAAMT,MAAM,EAAlB,IASD,SAAAQ,GAAC,OAAIA,EAAEC,MAAMT,MAAM,EAAlB,I,SCxCT,SAASW,IACpB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,WAAuBC,GAAvB,mGAEoCC,EAAAA,EAAAA,GAAUD,GAF9C,OAEcE,EAFd,OAGcC,EAAgBD,EAAcE,KAAI,kBAAsC,CAACC,KAAvC,EAAEA,KAA2CC,aAA7C,EAAQA,aAAmDC,UAA3D,EAAsBA,UAAtB,IACxCT,EAAQK,GAJhB,gDAMQK,QAAQC,IAAR,MANR,0DADY,uBAAC,SAAD,2BAWZC,CAAQhB,EACX,GAAE,CAACA,KAGA,SAACf,EAAA,EAAD,CAAKgC,GAAG,MAAMrB,EAAG,EAAjB,SACK,CAACO,KAAAA,KAAS,SAACR,EAAD,UACNQ,EAAKO,KAAI,YACL,IADOC,EACR,EADQA,KAAMC,EACd,EADcA,aAAcC,EAC5B,EAD4BA,UAC3B,OAAGD,GAEI,UAACd,EAAD,YACI,gBAAKoB,IAAG,0CAAqCN,GAAgBO,IAAKR,KAClE,uBAAIA,KACJ,uCAAeE,OAHRF,IAQX,UAACb,EAAD,YACI,uBAAIa,KACJ,uCAAeE,OAFRF,EAMlB,OAKpB,C,8LC/CDS,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAa,mCAAG,6GAEEF,EAAAA,EAAAA,IAAA,mCACSC,IAHX,cAEfE,EAFe,yBAIdA,EAASC,KAAKC,SAJA,gCAMrBX,QAAQC,IAAR,MANqB,yDAAH,qDAUbW,EAAU,mCAAG,WAAOpB,GAAP,gGAEKc,EAAAA,EAAAA,IAAA,gBACVd,EADU,oBACIe,EADJ,oBAFL,cAEZE,EAFY,yBAIXA,EAASC,MAJE,gCAMlBV,QAAQC,IAAR,MANkB,yDAAH,sDAUVR,EAAS,mCAAG,WAAOD,GAAP,gGAEMc,EAAAA,EAAAA,IAAA,gBACVd,EADU,4BACYe,EADZ,oBAFN,cAEXE,EAFW,yBAIVA,EAASC,KAAKrB,MAJJ,gCAMjBW,QAAQC,IAAR,MANiB,yDAAH,sDAUTY,EAAY,mCAAG,WAAOrB,GAAP,gGAEGc,EAAAA,EAAAA,IAAA,gBACVd,EADU,4BACYe,EADZ,oBAFH,cAEdE,EAFc,yBAIbA,EAASC,KAAKC,SAJD,gCAMpBX,QAAQC,IAAR,MANoB,yDAAH,sDAUZa,EAAgB,mCAAG,WAAOjB,GAAP,gGAEDS,EAAAA,EAAAA,IAAA,+BACKC,EADL,kBACsBV,IAHrB,cAElBY,EAFkB,yBAIjBA,EAASC,KAAKC,SAJG,gCAMxBX,QAAQC,IAAR,MANwB,yDAAH,qD","sources":["components/Box.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/Movie-Database-api.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position\n);","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    justify-content: space-around;\n    padding: ${p => p.theme.space[4]}px ${p => p.theme.space[2]}px;\n\n    @media screen and (min-width: 330px){\n        grid-template-columns: 1fr 1fr 1fr;\n    }\n    \n    @media screen and (min-width: 1200px){\n        grid-template-columns: 1fr 1fr 1fr 1fr;\n    }\n    `;\n\nexport const Item = styled.li`\n    width: 100px;\n    margin-bottom: ${p => p.theme.space[4]}px;\n    \n    & p{\n        text-align: center;\n    }\n\n    & p:not(:last-child){\n        margin-bottom: ${p => p.theme.space[3]}px;\n    }\n    \n    & img{\n        width: 100px;\n        margin-bottom: ${p => p.theme.space[3]}px;\n    }\n\n\n    @media screen and (min-width: 768px){\n        width: 200px;\n        margin-left: ${p => p.theme.space[4]}px;\n\n        & img{\n        width: 200px;\n        }\n    }\n\n    @media screen and (min-width: 1200px){\n        width: 250px;\n        margin-left: ${p => p.theme.space[4]}px;\n\n        & img{\n        width: 250px;\n        }\n    }\n`","import { Box } from \"components/Box\";\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCast } from \"services/Movie-Database-api\";\nimport { Item, List } from \"./Cast.styled\";\n\nexport default function Cast() {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n\n    useEffect(() => {\n        async function getCast(id) {\n            try {\n                const resultingData = await fetchCast(id);\n                const necessaryData = resultingData.map(({name, profile_path, character}) => ({name, profile_path, character}))\n                setCast(necessaryData);\n            } catch (error) {\n                console.log(error);\n            }\n        }\n\n        getCast(movieId);\n    }, [movieId])\n\n    return(\n        <Box as='div' p={2}>\n            {{cast} && <List>\n                {cast.map(({name, profile_path, character}) => \n                    {if(profile_path){\n                        return(\n                            <Item key={name}>\n                                <img src={`https://image.tmdb.org/t/p/w500/${profile_path}`} alt={name} />\n                                <p>{name}</p>\n                                <p>Character: {character}</p>\n                            </Item>\n                        )\n                    } else {\n                        return(\n                            <Item key={name}>\n                                <p>{name}</p>\n                                <p>Character: {character}</p>\n                            </Item>\n                        )\n                    }\n                    }\n                )}\n            </List>}\n        </Box>\n    )\n}","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'c0f869c87d748d5d35a5a4a4dbb44054';\n\nexport const fetchTrending = async () => {\n    try {\n        const response = await axios.get(\n            `trending/all/day?api_key=${API_KEY}`);\n        return response.data.results;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchMovie = async (id) => {\n    try {\n        const response = await axios.get(\n            `movie/${id}?api_key=${API_KEY}&language=en-US`);\n        return response.data;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchCast = async (id) => {\n    try {\n        const response = await axios.get(\n            `movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n        return response.data.cast;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchReviews = async (id) => {\n    try {\n        const response = await axios.get(\n            `movie/${id}/reviews?api_key=${API_KEY}&language=en-US`);\n        return response.data.results\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchMovieByName = async (name) => {\n    try {\n        const response = await axios.get(\n            `search/movie?api_key=${API_KEY}&query=${name}`);\n        return response.data.results\n    } catch (error) {\n        console.log(error);\n    }\n}"],"names":["Box","styled","color","space","layout","flexbox","grid","background","border","position","List","p","theme","Item","Cast","movieId","useParams","useState","cast","setCast","useEffect","id","fetchCast","resultingData","necessaryData","map","name","profile_path","character","console","log","getCast","as","src","alt","axios","API_KEY","fetchTrending","response","data","results","fetchMovie","fetchReviews","fetchMovieByName"],"sourceRoot":""}